/*Roisin McPhillips OOP CA6*/
package ClientServer;

import DTOs.TollEvent;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import javax.json.Json;
import javax.json.JsonObject;

public class Client
{

    public static void main(String[] args)
    {
        Client client = new Client();
        client.start();
    }

    public void start()
    {
        Scanner in = new Scanner(System.in);
        try
        {
            Socket socket = new Socket("localhost", 8080);  // connect to server socket, and open new socket

            System.out.println("Client: Port# of this client : " + socket.getLocalPort());
            System.out.println("Client: Port# of Server :" + socket.getPort());

            System.out.println("Client: This Client is running and has connected to the server");

            //Commands used for requesting data from server and for sending data over
            System.out.println("[Commands: \"GetRegisteredVehicles\" to get registered vehicles, "
                    + "\"HeartBeat\" to get heartbeat, "
                    + "\"RegisterValidTollEvent\" to register a valid toll event, "
                    + "\"RegisterInvaildTollEvent\" to register an invalid toll event, "
                    + "\"Close\" to close the connection)]");

            System.out.println("Please enter a command: ");

            String command = in.nextLine();  // read a command from the user

            OutputStream os = socket.getOutputStream();

            PrintWriter socketWriter = new PrintWriter(os, true);// true=> auto flush buffers
            socketWriter.println(command);  // write command to socket

            Scanner socketReader = new Scanner(socket.getInputStream()); //Read Messages over the server

            //Start of HeartBeat Message
            if (command.startsWith("HeartBeat")) //expect server to return a time (in milliseconds)
            {
                //We prepare the heartbeat message

                // Parse the JSON for HeartBeat Message to be sent over to server
                String jsonString = "{"
                        + "\"PacketType\":"
                        + "\"HeartBeat\""
                        + "}";
                System.out.println("Json String as generated by code:" + jsonString);

                //Wrap the JsonArray in a JsonObject & give the JsonArray a key name
//                JsonObject jsonRootObject = Json.createObjectBuilder()
//                        .add("PacketType", "HeartBeat") //"PacketType" = Key, "HeartBeat" = Value
//                        .build();
//
//                String value = jsonRootObject.toString();
                socketWriter.println(jsonString); //Writes the command to a socket
                System.out.println("Client Request: " + jsonString);

                String response = socketReader.nextLine();
                System.out.println("Response from Server: \"" + response + "\"");
            }
            //End Of HeartBeat Message

            //Start of GetRegisteredVehicles Message
            else if (command.startsWith("GetRegisteredVehicles")) //expect server to return a time (in milliseconds)
            {
                //We prepare the GetRegisteredVehicles message
                //Parsing - Json String
                String jsonString = "{"
                        + "\"PacketType\":"
                        + "\"GetRegisteredVehicles\""
                        + "}";
                System.out.println("Json String as generated by code:" + jsonString);

                //Wrap the JsonArray in a JsonObject & give the JsonArray a key name
//                JsonObject jsonRootObject = Json.createObjectBuilder()
//                        .add("PacketType", "GetRegisteredVehicles") //"PacketType" = Key, "GetRegisteredVehicles" = Value
//                        .build();
//
//                String value = jsonRootObject.toString();
                socketWriter.println(jsonString); //Writes the command to a socket
                System.out.println("Client Request: " + jsonString);

                String response = socketReader.nextLine();
                System.out.println("Response from Server: \"" + response + "\"");
            }
            //End Of GetRegisteredVehicles Message

            //Start of RegisterVaildTollEvent Message
            else if (command.startsWith("RegisterVaildTollEvent"))
            {
                //We prepare the RegisterVaildTollEvent message
                Set<String> Hashset;
                Hashset = loadVailadation("Toll-Events.csv");
                HashMap<String, ArrayList<TollEvent>> map = new HashMap<>();
                TollEvent event = new TollEvent(41, "162CN3457", 30446, 2020);

                if (Hashset.contains(event.getRegistration()))
                {
                    System.out.println("Is valid " + event);

                    if (map.get(event.getRegistration()) == null) // it's not there
                    {
                        ArrayList<TollEvent> list = new ArrayList<>();
                        list.add(event);
                        map.put(event.getRegistration(), list);
                    }
                    else // reg is already there
                    {
                        ArrayList<TollEvent> list = map.get(event.getRegistration());
                        list.add(event);  // adds to ArrayList in the map             
                    }
                    System.out.println("From Map: " + map.get("162CN3457"));
                }

                // root object for json string
                String jsonString = "{["
                        + "\"PacketType\":"
                        + "\"RegisterInvaildTollEvent\","
                        + "\"TollBoothID\":" + "\"" + event.getId() + "\","
                        + "\"Vehicle Registration\":" + "\"" + event.getRegistration() + "\","
                        + "\"Vehicle Image ID\":" + "\"" + event.getImageId() + "\","
                        + "\"LocalDateTime\":" + "\"" + event.getTimestamp() + "\""
                        + "]";
                jsonString += "}";
                System.out.println("Json String as generated by code:" + jsonString);

//            //Wrap the JsonArray in a JsonObject & give the JsonArray a key name
                JsonObject jsonRootObject = Json.createObjectBuilder()
                        .add("PacketType", "RegisterVaildTollEvent") //"PacketType" = Key, "RegisterVaildTollEvent" = Value
                        .add("TollEvent", jsonString)
                        .build();
//
                String value = jsonRootObject.toString();
                socketWriter.println(value); //Writes the command to a socket
                System.out.println("Client Request: " + value);

                socketWriter.println(jsonString); //Writes the command to a socket
                System.out.println("Client Request: " + jsonString);

                String response = socketReader.nextLine();
                System.out.println("Response from Server: \"" + response + "\"");
            }
            //End Of RegisterVaildTollEvent Message

            //Start of RegisterInvaildTollEvent Message
            else if (command.startsWith("RegisterInvaildTollEvent"))
            {
                //We prepare the RegisterInvaildTollEvent message
                //We prepare the RegisterInvaildTollEvent message
                Set<String> Hashset;
                ArrayList<String> invalidRegistrationsList = new ArrayList<>();
                Hashset = loadVailadation("Toll-Events.csv");
                HashMap<String, ArrayList<TollEvent>> map = new HashMap<>();
                TollEvent event = new TollEvent(42, "Happy", 30448, 2020);
                if (Hashset.contains(event.getRegistration()))
                {
                    System.out.println("Is valid " + event);
                    if (map.get(event.getRegistration()) == null) // it's not there
                    {
                        ArrayList<TollEvent> list = new ArrayList<>();
                        list.add(event);
                        map.put(event.getRegistration(), list);
                    }
                    else // reg is already there
                    {
                        ArrayList<TollEvent> list = map.get(event.getRegistration());
                        list.add(event);  // adds to ArrayList in the map             
                    }

                    System.out.println("From Map: " + map.get("Happy"));
                }
                else
                {
                    System.out.println("Is NOT a valid Registration");
                    // add to a list of Invalid registrations
                    invalidRegistrationsList.add(event.getRegistration());
                }
                System.out.println("List of invalid registrations:"
                        + invalidRegistrationsList);

                //Create an Invaild TollEvent
                String jsonString = "{["
                        + "\"PacketType\":"
                        + "\"RegisterVaildTollEvent\","
                        + "\"TollBoothID\":" + "\"" + event.getId() + "\","
                        + "\"Vehicle Registration\":" + "\"" + event.getRegistration() + "\","
                        + "\"Vehicle Image ID\":" + "\"" + event.getImageId() + "\","
                        + "\"LocalDateTime\":" + "\"" + event.getTimestamp() + "\""
                        + "]";
                jsonString += "}";
                System.out.println("Json String as generated by code:" + jsonString);

                //Wrap the JsonArray in a JsonObject & give the JsonArray a key name
                JsonObject jsonRootObject = Json.createObjectBuilder()
                        .add("PacketType", "RegisterInvaildTollEvent") //"PacketType" = Key, "RegisterInvaildTollEvent" = Value
                        .build();

                String value = jsonRootObject.toString();
                socketWriter.println(value); //Writes the command to a socket
                System.out.println("Client Request: " + value);

                String response = socketReader.nextLine();
                System.out.println("Response from Server: \"" + response + "\"");
            }
            //End Of RegisterInvaildTollEvent Message

            //Start of Close connection with client
            else if (command.startsWith("Close"))
            {
                //Wrap the JsonArray in a JsonObject & give the JsonArray a key name
//                JsonObject jsonRootObject = Json.createObjectBuilder()
//                        .add("PacketType", "Close") //"PacketType" = Key, "RegisterInvaildTollEvent" = Value
//                        .build();
//                String value = jsonRootObject.toString();

                //Wrapping the Close request in JSON Formatt
                String jsonString = "{"
                        + "\"PacketType\":"
                        + "\"Close\""
                        + "}";
                System.out.println("Json String as generated by code:" + jsonString);

                socketWriter.println(jsonString); //Writes the command to a socket
                System.out.println("Client Request: " + jsonString);

                System.out.println("GoodBye!"); //Closing connection with the server
            }
            //End Of Close Message

            else // the user has entered the Echo command or an invalid command
            {
                String input = socketReader.nextLine();// wait for, and retrieve the echo ( or other message)
                System.out.println("Client: Response from server: \"" + input + "\"");
            }

            socketWriter.close();
            socketReader.close();
            socket.close();
        } catch (IOException e)
        {
            System.out.println("Client message: IOException: " + e);
        }
    }

//TollEvent.csv file - creating new tollevent implemented from ca5
    public static Set loadVailadation(String fileName)
    {
        Set<String> Hashset = new HashSet<>();
        try
        {
            Scanner sc = new Scanner(new File(fileName));
            // default delimeter is whitespace and newlines
            sc.useDelimiter(";");
            while (sc.hasNext())
            {
                String registration = sc.next();
                Hashset.add(registration);
                System.out.println(registration);
            }
            sc.close();

        } catch (IOException e)
        {
            System.out.println("Error Reading File!");
        }
        return Hashset; // of valid registrations
    }
}
